Command line interface
======================
.. currentmodule:: frads

Frads provide several high-level command-line tools to expedite standard workflow and minimize user errors. The command-line tools also serve as examples of how to integrate the frads library with other software packages or graphical user-interfaces.

mrad
----
An user can complete an entire matrix-based simulation using the mrad program, which takes a configuration file as input detailing the model setup, including the material and geometry data as Radiance primitives and model-specific information such as which geometry corresponds to windows and walls.

An example configuration file can be automatically generated by using the command from the project root directory.

.. code:: bash

   $ mrad init

An run.cfg file will be automatically generated using the Radiance model files present in the default directory structure, which includes an Objects directory for all model objects (e.g. floor, walls, ceiling) with an .rad extension and material definition with an .mat file extension.  The init command will continue to make Matrices, Resources, and Results directory to store the generated matrices, weather, and results from the simulation. The init command also provides a series of default simulation parameters for the various matrix generation procedures. A typical configuration file consists of five sections: simulation control, file structure, site, model, and ray senders. An excerpt of the automatically generate configuration look like this::

   vmx_basis = kf
   vmx_opt = -ab 5 -ad 65536 -lw 1e-8
   fmx_basis = kf
   smx_basis = r4
   dmx_opt = -ab 2 -ad 128 -c 2000
   dsmx_opt = -ab 2 -ad 64 -lw 1e-4
   cdsmx_opt = -ab 0
   ray_count = 1
   pixel_jitter = 0.7
   separate_direct = False
   nprocess = 1
   overwrite = False

File structure section of the configuration need not to be changed unless the user elect to having a different one. The structure is default to::

   base = /PATH/TO/YOUR/PROJECT
   matrices = Matrices
   results = Results
   objects = Objects
   resources = Resources

Site information relates to building location and orientation. An user has to specify one of the three parameters to define the location: the weather file name, latitude and longitude, and zip code (U.S only). The orientation parameter is used to rotate the sky model while the building remains static, with zero degree representing a south facing facade and 90 representing a west facing facade. A excerpt of the site configuration::

   wea_path
   latitude = 37
   longitude = 122
   zipcode
   orientation = 0

The model section describes the model components: geometry and material definitions. If no windows are defined, mrad will initiate the two-phase (daylighting coefficient) method. If windows with different orientation or having different exterior shading, they should be grouped by individual files.::

   material = materials.mat
   windows
   scene = ground.rad floor.rad ceiling.rad lower_glass.rad walls.rad upper_glass.rad
   ncp_shade
   bsdf
   sunbsdf

Ray sender represents the objects used to spawn rays: grid points and view (image rendering). A user has to define at least one ray sender for mrad to carry out the simulation. For grid based illuminance/irradiance simulation (e.g. workplane illuminance), the grid surface, usually floor,::

   view1
   grid_surface = floor.rad
   grid_height = 0.76
   grid_spacing = .6

When ready to carry out the simulation, run

.. code:: bash

   $ mrad run

If a configuration file has been prepared beforehand, for example as test.cfg, simple append the files name as such::

   $ mrad run test.cfg

to avoid running the init command.

**Example: workplane illuminance using two-phase method**

Take the following simple geometry in Radiance format in a local **Objects** directory::

   #materials.mat
   void plastic carpet 0 0 5 .2 .2 .2 0 0
   void plsatic white_70 0 0 5 .7 .7 .7 0 0
   void plsatic white_50 0 0 5 .5 .5 .5 0 0
   void glass glass_60 0 0 3 .64 .64 .64

   #floor.rad
   carpet polygon floor
   0 0 12 0 0 0 3 0 0 3 5 0 0 5 0

   #ceiling.rad
   white_70 polygon ceiling
   0 0 12 0 0 2.5 3 0 2.5 3 5 2.5 0 5 2.5

   #wall.rad
   white_50 polygon wall.north
   0 0 12 3 5 0 3 5 2.5 0 5 2.5 0 5 0

   white_50 polygon wall.east
   0 0 12 3 0 0 3 0 2.5 3 5 2.5 3 5 0

   white_50 polygon wall.west
   0 0 12 0 5 0 0 5 2.5 0 0 2.5 0 0 0

   white_50 polygon wall.south.00
   0 0 30 0 0 0 0.5 0 0.3 2.5 0 0.3 2.5 0 1.8 0.5 0 1.8 0.5 0 0.3 0 0 0 0 0 2.5 3 0 2.5 3 0 0

.. note::
   the same geometry can be generated using *genradroom* command from terminal/cmd:

   genradroom 3 5 3 -w 0.5 0.3 2 1.5 -t 0

We can use the *init* command like so::

   $ mrad init

After which a run.cfg file will be created as a template configuration file along with default directories to store various files. We can add *floor.rad* to the grid_surface variable to generate our sensor grid from. We need to also add site location information to obtain weather data. We have the option to input *.wea* file path, latitude and longitude, or zipcode (US only). After the modification we arrive at a configuration file like so::

   #run.cfg
   [mrad configration]
   vmx_basis = kf
   vmx_opt = -ab 5 -ad 65536 -lw 1e-8
   fmx_basis = kf
   fmx_opt
   smx_basis = r4
   dmx_opt = -ab 2 -ad 128 -c 2000
   dsmx_opt = -ab 2 -ad 64 -lw 1e-4
   cdsmx_opt = -ab 0
   ray_count = 1
   pixel_jitter = 0.7
   separate_direct = False
   nprocess = 1
   overwrite = False
   method
   base = /Users/taoning
   matrices = Matrices
   results = Results
   objects = Objects
   resources = Resources
   wea_path
   latitude = 37.78
   longitude = -122.2
   zipcode
   daylight_hours_only = True
   start_hour
   end_hour
   orientation = 0
   material = materials.mat
   windows
   scene = floor.rad wall.rad window1.rad window0.rad ceiling.rad
   ncp_shade
   bsdf
   dbsdf
   view1
   grid_surface = floor.rad
   grid_height = .76
   grid_spacing = .6
   grid_opposite = True

Once we have the configuration file ready, we can start the simulation::

   $ mrad -vv run

which will run the simulation with verbose set to *info* level using the default run.cfg file. Your console should print out the following information::

   2021-04-20 22:10:43,857 - frads.mtxmethod.Prepare - INFO - Downloading EPW file using lat&lon.
   2021-04-20 22:10:44,936 - frads.mtxmethod.Prepare - INFO - Downloaded : USA_CA_Oakland.Intl.AP.724930_TMY3.epw
   2021-04-20 22:10:44,937 - frads.mtxmethod.Prepare - INFO - Converting EPW to a .wea file
   2021-04-20 22:10:44,983 - frads.mtxmethod - INFO - Generating sku/sun matrix using command
   2021-04-20 22:10:44,983 - frads.mtxmethod - INFO - gendaymtx -of -m 4 /Users/taoning/Resources/USA_CA_Oakland.Intl.AP.724930_TMY3.wea
   2021-04-20 22:10:46,711 - frads - INFO - Using two-phase method
   2021-04-20 22:10:46,712 - frads.mtxmethod.Prepare - INFO - Computing for 2-phase sensor point matrices...
   2021-04-20 22:10:46,778 - frads.mtxmethod.Prepare - INFO - Computing for image-based 2-phase matrices...
   2021-04-20 22:10:46,778 - frads.mtxmethod.Prepare - INFO - Computing for 2-phase sensor grid results.
   2021-04-20 22:10:50,708 - frads.mtxmethod.Prepare - INFO - Computing for 2-phase image-based results

After the simulation had finished, the results are in the Results directory. In the case of workplane illuminance results::

   0101_0830	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03
   0101_0930	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03
   ...




genmtx
------
*genmtx* helps with matrix generation using rfluxmtx and rcontrib. It automatically wraps and decorates the primitive files. Help/instruction can be found by typing on command-line::

   $ genmtx -h
   usage: genmtx [-h] -st {s,v,p} -s SENDER -r RECEIVER [RECEIVER ...]
              [-i OCTREE] -o OUTPATH [OUTPATH ...] [-env ENV [ENV ...]] -rs
              {r1,r2,r4,r6,kf,sc25} [-ss SENDER_BASIS] [-ro RECEIVER_OFFSET]
              [-so SENDER_OFFSET] [-opt OPTION] [-rc RAY_COUNT]
              [-res RESOLU RESOLU] [-smx SMX] [-wpths WPTHS [WPTHS ...]] [-v]

   Generate flux transport matrix given a ray sender and receiver(s)

   optional arguments:
     -h, --help            show this help message and exit
     -st {s,v,p}           Sender object type: (s)urface, (v)iew, (p)oint
     -s SENDER             Sender object: can be a view file, a grid point file,
                           a .rad file
     -r RECEIVER [RECEIVER ...]
                           Receiver objects, can be "sky", "sun", or .rad files
     -i OCTREE             Scene octree file path (.oct)
     -o OUTPATH [OUTPATH ...]
                           Output file path | directory
     -env ENV [ENV ...]    Environment file paths
     -rs {r1,r2,r4,r6,kf,sc25}
                           Receiver sampling basis, ....
     -ss SENDER_BASIS      Sender sampling basis if sender type is (s)urface,
                           kf|r1|r2|....
     -ro RECEIVER_OFFSET   Move receiver surface in normal direction
     -so SENDER_OFFSET     Move sender surface in normal direction
     -opt OPTION           Simulation parameters enclosed in double quotation
                           marks, e.g. "-ab 1 -ad 64"
     -rc RAY_COUNT         Ray count
     -res RESOLU RESOLU    X and Y resolution for the image, defeault=[800, 800]
     -smx SMX              Sky matrix file path, used to cull redundant suns
     -wpths WPTHS [WPTHS ...]
                           window primitive paths, used to cull redundant suns
     -v, --verbose         verbose mode

We can generate a simple daylight coefficient matrix using the example from mrad section::

   # generate a grid from floor surface
   $ gengrid floor.rad .76 .6 > grid.pts

   # using genmtx to generate a daylight coefficient matrix and save it as dsmx.mtx
   $ genmtx -st p -s grid.pts -r sky -rs r4 -env Objects/materials.mat Objects/ceiling.rad Objects/wall.rad Objects/floor.rad Objects/window0.rad -o dsmx.mtx


genradroom
----------
*genradroom* can be used to generate a generic box side-lit room model::

   $ genradroom -h
   usage: genradroom [-h] [-w start_x start_z width height] [-t Facade thickness] width depth height

   Generate a generic room with window facing the -Y direction

   positional arguments:
     width                 room width along X axis, starting from x=0
     depth                 room depth along Y axis, starting from y=0
     height                room height along Z axis, starting from z=0

   optional arguments:
     -h, --help            show this help message and exit
     -w start_x start_z width height
                           Define a window from lower left corner
     -t Facade thickness


gengrid
-------
*gengrid* can be used to generate a sensor grid given a surface, spacing, and height.

.. program-output:: gengrid -h



eprad
-----
   eprad

ep2rad
------
   ep2rad
