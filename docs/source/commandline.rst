Command line interface
======================
.. currentmodule:: frads

frads provides several command-line tools to expedite standard Radiance workflows and minimize user errors. The command-line tools also serve as examples of how to integrate the frads library with other software packages or graphical user interfaces.

mrad
----
A user can complete an entire matrix-based simulation using the mrad program.  The first step involves creating a configuration file, which includes: 1) user-defined details about the site and room model, and 2) details on how the Radiance simulation will be performed (these details are automatically generated by mrad).  The second step involves running mrad with the configuration file to carry out the Radiance simulation.

A configuration file (.cfg) can be typed in manually, programatically generated, or generated using the init command from the project root directory.

.. code:: bash

   $ mrad init -w somewhere.wea

The init command creates the "Matrices" and "Results" directories to store the generated matrices and results from the simulation. It also creates the configuration file which consists of five sections: simulation control, site, model, and ray senders. Note: empty entry, e.g., "wea_path=", should be avoided.

For simulation control, the init command automatically generates a series of default simulation parameters for the various matrix generation procedures.  An excerpt of the simulation control configuration looks like this::

   vmx_basis = kf
   vmx_opt = -ab 5 -ad 65536 -lw 1e-8
   fmx_basis = kf
   smx_basis = r4
   dmx_opt = -ab 2 -ad 128 -c 2000
   dsmx_opt = -ab 2 -ad 64 -lw 1e-4
   cdsmx_opt = -ab 0
   ray_count = 1
   pixel_jitter = 0.7
   separate_direct = False
   nprocess = 1
   overwrite = False

Site information relates to the building's location and orientation. A user can either specify the .wea file path or .epw file path.start and end hour, daylight_hours_only can also be specified to reduce the size of the .wea data.  The orientation parameter is used to rotate the sky model while the building remains static, with zero degrees representing a south-facing facade and 90 degrees representing a west-facing facade. Here's an excerpt of the site configuration::

   wea_path 
   start_hour = 8
   end_hour = 18
   daylight_hours_only = True
   orientation = 0

The model section describes the model components: geometry and material definitions. If no windows are defined, mrad will initiate the two-phase (daylight coefficient) method. If windows with different orientations or having different exterior shading are included, they should be grouped by individual files.::

   material = materials.mat
   windows
   scene = ground.rad floor.rad ceiling.rad lower_glass.rad walls.rad upper_glass.rad
   ncp_shade
   bsdf
   sunbsdf

Ray sender represents the objects used to spawn rays: grid points and view (image rendering). A user has to define at least one ray sender for mrad to carry out the simulation. For grid-based illuminance or irradiance simulations (e.g., workplane illuminance), the grid surface, usually the floor, must be included::

   view1
   grid_surface = floor.rad
   grid_height = 0.76
   grid_spacing = .6

When ready to carry out the simulation, run

.. code:: bash

   $ mrad run

If a configuration file has been prepared beforehand, for example as test.cfg, simply append the filename as such::

   $ mrad run test.cfg

to avoid running the init command.

**Example: workplane illuminance using the two-phase method**

Put the following text (i.e., simple geometry description in Radiance format) in a local **Objects** directory::

   #materials.mat
   void plastic carpet 0 0 5 .2 .2 .2 0 0
   void plastic white_70 0 0 5 .7 .7 .7 0 0
   void plastic white_50 0 0 5 .5 .5 .5 0 0
   void glass glass_60 0 0 3 .64 .64 .64

   #floor.rad
   carpet polygon floor
   0 0 12 0 0 0 3 0 0 3 5 0 0 5 0

   #ceiling.rad
   white_70 polygon ceiling
   0 0 12 0 0 2.5 3 0 2.5 3 5 2.5 0 5 2.5

   #wall.rad
   white_50 polygon wall.north
   0 0 12 3 5 0 3 5 2.5 0 5 2.5 0 5 0

   white_50 polygon wall.east
   0 0 12 3 0 0 3 0 2.5 3 5 2.5 3 5 0

   white_50 polygon wall.west
   0 0 12 0 5 0 0 5 2.5 0 0 2.5 0 0 0

   white_50 polygon wall.south.00
   0 0 30 0 0 0 0.5 0 0.3 2.5 0 0.3 2.5 0 1.8 0.5 0 1.8 0.5 0 0.3 0 0 0 0 0 2.5 3 0 2.5 3 0 0

.. note::
   the same geometry can be generated using *genradroom* command from terminal/cmd:

   genradroom 3 5 3 -w 0.5 0.3 2 1.5 -t 0

We can use the *init* command like so::

   $ mrad init

After which a run.cfg file will be created as a template configuration file along with default directories to store the various files. We can add *floor.rad* to the grid_surface variable to generate our sensor grid. We also need to add site location information to obtain weather data. We have the option to input *.wea* file path, latitude and longitude, or zipcode (U.S. only). After the modification we arrive at a configuration file like so::

   #run.cfg
   [mrad configuration]
   vmx_basis = kf
   vmx_opt = -ab 5 -ad 65536 -lw 1e-8
   fmx_basis = kf
   fmx_opt
   smx_basis = r4
   dmx_opt = -ab 2 -ad 128 -c 2000
   dsmx_opt = -ab 2 -ad 64 -lw 1e-4
   cdsmx_opt = -ab 0
   ray_count = 1
   pixel_jitter = 0.7
   separate_direct = False
   nprocess = 1
   overwrite = False
   method

   base = /Users/taoning
   matrices = Matrices
   results = Results
   objects = Objects
   resources = Resources

   wea_path
   latitude = 37.78
   longitude = -122.2
   zipcode
   daylight_hours_only = True
   start_hour
   end_hour
   orientation = 0

   material = materials.mat
   windows
   scene = floor.rad wall.rad window1.rad window0.rad ceiling.rad
   ncp_shade
   bsdf
   dbsdf

   view1
   grid_surface = floor.rad
   grid_height = .76
   grid_spacing = .6
   grid_opposite = True

Once we have the configuration file ready, we can start the simulation::

   $ mrad -vv run

which will run the simulation with verbose set to *info* level using the default run.cfg file. Your console should print out the following information::

   2021-04-20 22:10:43,857 - frads.mtxmethod.Prepare - INFO - Downloading EPW file using lat&lon.
   2021-04-20 22:10:44,936 - frads.mtxmethod.Prepare - INFO - Downloaded : USA_CA_Oakland.Intl.AP.724930_TMY3.epw
   2021-04-20 22:10:44,937 - frads.mtxmethod.Prepare - INFO - Converting EPW to a .wea file
   2021-04-20 22:10:44,983 - frads.mtxmethod - INFO - Generating sku/sun matrix using command
   2021-04-20 22:10:44,983 - frads.mtxmethod - INFO - gendaymtx -of -m 4 /Users/taoning/Resources/USA_CA_Oakland.Intl.AP.724930_TMY3.wea
   2021-04-20 22:10:46,711 - frads - INFO - Using two-phase method
   2021-04-20 22:10:46,712 - frads.mtxmethod.Prepare - INFO - Computing for 2-phase sensor point matrices...
   2021-04-20 22:10:46,778 - frads.mtxmethod.Prepare - INFO - Computing for image-based 2-phase matrices...
   2021-04-20 22:10:46,778 - frads.mtxmethod.Prepare - INFO - Computing for 2-phase sensor grid results.
   2021-04-20 22:10:50,708 - frads.mtxmethod.Prepare - INFO - Computing for 2-phase image-based results

After the simulation has finished, the results are routed to the Results directory. In the case of workplane illuminance results::

   0101_0830	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03	 2.702708389759064e+03
   0101_0930	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03	 2.720932005119324e+03
   ...




genmtx
------
*genmtx* helps with matrix generation using rfluxmtx and rcontrib. It automatically wraps and decorates the primitive files. Help/instruction can be found by typing on command-line::

   $ genmtx -h

.. program-output:: genmtx -h

We can generate a simple daylight coefficient matrix using the example from the mrad documentation::

   # generate a grid from floor surface
   $ gengrid floor.rad .76 .6 > grid.pts

   # use genmtx to generate a daylight coefficient matrix and save it as dsmx.mtx
   $ genmtx -st p -s grid.pts -r sky -rs r4 -env Objects/materials.mat Objects/ceiling.rad Objects/wall.rad Objects/floor.rad Objects/window0.rad -o dsmx.mtx


genradroom
----------
*genradroom* can be used to generate a generic box side-lit room model::

   $ genradroom -h

.. program-output:: genradroom -h


gengrid
-------
*gengrid* can be used to generate a sensor grid given a surface, spacing, and height. Help and instruction can be found using the -h flag::

   $ gengrid -h

.. program-output:: gengrid -h


dctsnp
-------
*dctsnp* can be used to do matrix multiplication similar to what the Radiance dctimestep program does. Matrix multiplications are performed using Python numpy packages (i.e., numpy is required for this tool), which are based on BLAS linear algebra packages. Help and instruction can be found using the -h flag::

   $ dctsnp -h

.. program-output:: dctsnp -h


rglaze
-------
*glaze* produces the same output as the original .csh glaze interactive script that comes with the Radiance distro. This command-line program is not interactive; glass coating and coating-side of the glass layer are determined by input Optics files or IGSDB json data. Help and instruction can be found using the -h flag::

   $ rglaze -h

.. program-output:: rglaze -h

gencolorsky
-----------
Gencolorsky uses `libRadtran <http://www.libradtran.org/>`_ to compute spatially- and spectrally-resolved sky radiation data based on an Earth’s spherical atmosphere radiative transfer model that includes Rayleigh scattering by air molecules, molecular absorption, aerosol, water, and ice clouds. One of the main command-line programs in libRadtran, uvspec, is invoked to compute the sky radiance at every r° (default 3°) in both the azimuth and altitude directions.  Within uvspec, the DISORT radiative transfer solver is used.  Extraterrestrial solar source data (280-800 nm), at 1nm interval, are used to generate spectrally-resolved sky radiation data at each sample point, which by default is computed at a 10 nm interval from 360 nm to 800 nm. By default, this sky spectral data is converted to Radiance RGB using CIE XYZ tristimulus with either the 2° or 10° standard observer, using user defined color space (default: Radiance RGB). If -i setting is used, the resulting three channels become photopic (CIE-Y), melanopic equivalent daylight il/luminance (EDI), and solar ir/radiance, respectively. The output is a folder called cs_{datetime}_{lat}_{lon} in the current working directory, containing a sky.rad file along with associated color data.

To generate a sky vector (for e.g., annual calculations), genskyvec can be used on the resulting sky.rad::

   $ genskyvec < sky.rad > sky.vec

The options to gencolorsky are:

-a	Location latitude; positive is northern hemisphere (required)
-o	Location longitude; positive is western (required)
-m	Location standard meridian (required)
-u	Location altitude in km, default = 0
-i  Compute for photopic, melanopic, and solar for each of the three channels, instead of RGB.
-r	Angular resolution at which the sky is sampled, default = 3°
-s	Standard observer, 2° or 10°
-c	Colorspace from which the sky is derived, choices are {radiance, sharp, adobe, rimm, 709, p3, 2020}, default=Radiance
-e	Atmospheric composition file. Default to use AFGL data that came with libRadtran, automatically chosen depending on location and time of year.
-l	Standard aerosol profile. This option overwrites the aerosol optical depth setting,defined below. The profile choices are:

	* Continental_clean

	* Continental_average

	* Continental_polluted

	* Urban

	* Maritime_clean

	* Maritime_polluted

	* Maritime_tropical

	* Desert

	* Antarctic

-b	Cloud cover, [0, 1], 1 is complete cover. Cloud cover data can be sourced from TMY data.
-d	Aerosol optical depth, which can be sourced from TMY data.
-g	Cloud profile file path. Space separated file, three columns: height (km), liquid water content (LWC) (g/m3), effective radius (R_eff) (um). Default: water clouds exist from 2-5 km in altitude with a LWC of 2.5 g/m3 and R_eff of 100 um
-t	Compute GHI, DNI, and DHI, instead of full sky description. Handy for quick comparison against measurements.
-v	Verbosity -v=Debug, -vv=Info, -vvv=Warning, -vvvv=Error, -vvvvv=Critical, default=Warning

Examples:

1. Compute direct normal, diffuse horizontal, and global horizontal irradiance in solar spectrum for 2022-06-21 10:00 in Berkeley CA USA, with clear sky and continental_average aerosol profile::

   $ gencolorsky 2022 6 21 10 0 -a 37.7 -o 122.2 -m 120 -l continental_average -t
   
   Outputs:
       DNI: 864.40 W/m2; DHI: 124.47 W/m2; GHI: 862.96 W/m2

2. Compute RGB sky for 2022-12-21 16:30 in Berkeley, CA, USA, with .2 cloud cover and .3 aerosol optical depth::

   $ gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3

3. Compute photopic, melanopic, and solar for each of the three-channel for the same sky::

   $ gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 -i



eprad
-----
With the advent of EnergyPlus 9.3, the EnergyPlus core engine is semi-exposed through its Energy Management System via the C/Python application programming interface.

_frads_ leverages this new feature to integrate Radiance simulation engine with EnergyPlus by manipulating EnergyPlus EMS 'Actuators' at run-time. For a standard workflow, an user uses an EnergyPlus model (epJSON) as the input, specifies the one or more standard operation (e.g., sDA calculation using Radiance matrix-based methods).
A user can use the command line tool, eprad, to carry out a Radiance/EnergyPlus simulation::

   eprad.py test.epJSON [options]

ep2rad
------
   ep2rad
